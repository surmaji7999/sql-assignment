Table Salespeople:-

CREATE TABLE `lms`.`salespeople` (
  `SNUM` INT NOT NULL,
  `SNAME` VARCHAR(45) NULL,
  `CITY` VARCHAR(45) NULL,
  `COMM` INT NULL,
  PRIMARY KEY (`SNUM`));

INSERT INTO `sqlassignments`.`salespeople` (`SNUM`, `SNAME`, `CITY`, `COMM`) VALUES ('1001', 'Peel', 'London', '12');
INSERT INTO `sqlassignments`.`salespeople` (`SNUM`, `SNAME`, `CITY`, `COMM`) VALUES ('1002', 'Serres', 'SanJose', '13');
INSERT INTO `sqlassignments`.`salespeople` (`SNUM`, `SNAME`, `CITY`, `COMM`) VALUES ('1004', 'Motika', 'London', '11');
INSERT INTO `sqlassignments`.`salespeople` (`SNUM`, `SNAME`, `CITY`, `COMM`) VALUES ('1007', 'Rifkin', 'Barcelona', '15');
INSERT INTO `sqlassignments`.`salespeople` (`SNUM`, `SNAME`, `CITY`, `COMM`) VALUES ('1003', 'AxelRod', 'New York', '10');
INSERT INTO `sqlassignments`.`salespeople` (`SNUM`, `SNAME`, `CITY`, `COMM`) VALUES ('1008', 'Fran', 'London', '25');


Table Customers:-

CREATE TABLE `sqlassignments`.`customers` (
  `CNUM` INT NOT NULL,
  `CNAME` VARCHAR(45) NULL,
  `CITY` VARCHAR(45) NULL,
  `RATING` INT NULL,
  `SNUM` INT NULL,
  PRIMARY KEY (`CNUM`),
  INDEX `SNUM_idx` (`SNUM` ASC) VISIBLE,
  CONSTRAINT `SNUM`
    FOREIGN KEY (`SNUM`)
    REFERENCES `sqlassignments`.`salespeople` (`SNUM`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

INSERT INTO `sqlassignments`.`customers` (`CNUM`, `CNAME`, `CITY`, `RATING`, `SNUM`) VALUES ('2001', 'Hoffman', 'London', '100', '1001');
INSERT INTO `sqlassignments`.`customers` (`CNUM`, `CNAME`, `CITY`, `RATING`, `SNUM`) VALUES ('2002', 'Giovanni', 'Rome', '200', '1003');
INSERT INTO `sqlassignments`.`customers` (`CNUM`, `CNAME`, `CITY`, `RATING`, `SNUM`) VALUES ('2003', 'Liu', 'SanJose', '200', '1002');
INSERT INTO `sqlassignments`.`customers` (`CNUM`, `CNAME`, `CITY`, `RATING`, `SNUM`) VALUES ('2004', 'Grass', 'Berlin', '300', '1002');
INSERT INTO `sqlassignments`.`customers` (`CNUM`, `CNAME`, `CITY`, `RATING`, `SNUM`) VALUES ('2006', 'Clemens', 'London', '100', '1001');
INSERT INTO `sqlassignments`.`customers` (`CNUM`, `CNAME`, `CITY`, `RATING`, `SNUM`) VALUES ('2008', 'Cisneros', 'SanJose', '300', '1007');
INSERT INTO `sqlassignments`.`customers` (`CNUM`, `CNAME`, `CITY`, `RATING`, `SNUM`) VALUES ('2007', 'Pereira', 'Rome', '100', '1004');


Table Orders

CREATE TABLE `sqlassignments`.`orders` (
  `ONUM` INT NOT NULL,
  `AMT` FLOAT NULL,
  `ODATE` DATE NULL,
  `CNUM` INT NULL,
  `SNUM` INT NULL,
  PRIMARY KEY (`ONUM`),
  INDEX `CNUM_idx` (`CNUM` ASC) VISIBLE,
  INDEX `SNUM_idx` (`SNUM` ASC) VISIBLE,
  CONSTRAINT `CNUM`
    FOREIGN KEY (`CNUM`)
    REFERENCES `sqlassignments`.`customers` (`CNUM`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `SNUM1`
    FOREIGN KEY (`SNUM`)
    REFERENCES `sqlassignments`.`salespeople` (`SNUM`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

INSERT INTO `sqlassignments`.`orders` (`ONUM`, `AMT`, `ODATE`, `CNUM`, `SNUM`) VALUES ('3001', '18.69', '1990-03-10', '2008', '1007');
INSERT INTO `sqlassignments`.`orders` (`ONUM`, `AMT`, `ODATE`, `CNUM`, `SNUM`) VALUES ('3003', '767.19', '1990-03-10', '2001', '1001');
INSERT INTO `sqlassignments`.`orders` (`ONUM`, `AMT`, `ODATE`, `CNUM`, `SNUM`) VALUES ('3002', '1900.10', '1990-03-10', '2007', '1004');
INSERT INTO `sqlassignments`.`orders` (`ONUM`, `AMT`, `ODATE`, `CNUM`, `SNUM`) VALUES ('3005', '5160.45', '1990-03-10', '2003', '1002');
INSERT INTO `sqlassignments`.`orders` (`ONUM`, `AMT`, `ODATE`, `CNUM`, `SNUM`) VALUES ('3006', '1098.16', '1990-03-10', '2008', '1007');
INSERT INTO `sqlassignments`.`orders` (`ONUM`, `AMT`, `ODATE`, `CNUM`, `SNUM`) VALUES ('3009', '1713.23', '1990-04-10', '2002', '1003');
INSERT INTO `sqlassignments`.`orders` (`ONUM`, `AMT`, `ODATE`, `CNUM`, `SNUM`) VALUES ('3007', '75.75', '1990-04-10', '2004', '1002');
INSERT INTO `sqlassignments`.`orders` (`ONUM`, `AMT`, `ODATE`, `CNUM`, `SNUM`) VALUES ('3008', '4723.00', '1990-05-10', '2006', '1001');
INSERT INTO `sqlassignments`.`orders` (`ONUM`, `AMT`, `ODATE`, `CNUM`, `SNUM`) VALUES ('3010', '1309.95', '1990-06-10', '2004', '1002');
INSERT INTO `sqlassignments`.`orders` (`ONUM`, `AMT`, `ODATE`, `CNUM`, `SNUM`) VALUES ('3011', '9891.88', '1990-06-10', '2006', '1001');

1) List all the columns of the Salespeople table.
	mysql> SHOW columns from salespeople;
	mysql> SELECT * FROM salespeople;

2) List all customers with a rating of 100.
	mysql> SELECT cnum,cname FROM customers WHERE rating=100;

3) Find the largest order taken by each salesperson on each date.
	
4) Arrange the Order table by descending customer number.
	mysql> SELECT * FROM orders ORDER BY cnum DESC;	

5) Find which salespeople currently have orders in the order table.
	mysql> SELECT DISTINCT salespeople.snum,sname FROM salespeople JOIN orders;

6) List names of all customers matched with the salespeople serving them.
	mysql> SELECT customers.cname FROM customers,salespeople WHERE customers.snum=salespeople.snum;

7) Find the names and numbers of all salespeople who have more than one customer.
	mysql> SELECT sname, snum FROM salespeople WHERE 1<(SELECT COUNT(*)FROM customers WHERE customers.snum=salespeople.snum);

8) Count the orders of each of the salespeople and output the results in descending order.
	mysql> SELECT salespeople.snum, salespeople.sname, COUNT(*) AS ORDER_COUNT FROM salespeople join orders WHERE salespeople.snum=orders.snum GROUP BY orders.snum;

9) List the customer table if and only if one or more of the customers in the Customer table are located in SanJose.
	mysql> SELECT * FROM customers WHERE EXISTS (SELECT *FROM customers WHERE CITY ="sanjose");

10) Match salespeople to customers according to what city they live in.
	mysql> SELECT * FROM salespeople join customers Where salespeople.city= customers.city AND salespeople.snum=customers.snum;

11) Find all the customers in SanJose who have a rating above 200.
	mysql> SELECT * FROM customers WHERE city = "sanjose" and rating >200;

12) List the names and commissions of all salespeople in London.
	mysql> SELECT salespeople.sname,salespeople.comm FROM salespeople WHERE city = "london";

13) List all the orders of Salesperson Motika from the orders table.
	mysql> SELECT * FROM ORDERS WHERE orders.snum=(select salespeople.snum FROM salespeople WHERE s

14) Find all customers who booked orders on October 3.
	mysql> SELECT * FROM orders join customers WHERE customers.cnum=orders.cnum AND orders.odate='1990-03-10';

15) Give the sums of the amounts from the Orders table, grouped by date, eliminating all those dates where the SUM was not at least 2000 above
	mysql> SELECT odate, SUM(amt) FROM orders a GROUP BY odate HAVING SUM(amt) > (SELECT 2000.00 + MAX(amt) FROM orders b WHERE a.odate = b.odate);

16) Select all orders that had amounts that were greater than at least one of the orders from October 6.	
	mysql> SELECT * FROM orders WHERE amt > ANY (SELECT amt FROM orders WHERE odate='1990-06-10');

17) Write a query that uses the EXISTS operator to extract all salespeople who have customers with a rating of 300.
	mysql> SELECT * FROM salespeople WHERE EXISTS(select rating FROM customers WHERE salespeople.snum=customers.snum AND rating=300);

18) Find all customers whose cnum is 1000 above the snum of Serres.
	mysql> SELECT cnum,cname FROM customers WHERE cnum>(SELECT snum+1000 FROM salespeople WHERE sname="serres");

19) Give the salespeople’s commissions as percentages instead of decimal numbers.
	mysql> SELECT snum,sname,comm*100 as "commision%" FROM salespeople;

20) Find the largest order taken by each salesperson on each date, eliminating those Maximum orders, which are less than 3000.
	mysql> SELECT salespeople.snum,salespeople.sname, max(amt)FROM salespeople join orders where orders.snum=salespeople.snum GROUP BY odate,orders.snum having max(amt)>3000;

21) List all the largest orders for October 3, for each salesperson.
	mysql> SELECT salespeople.sname,orders.onum,odate ,MAX(amt) FROM salespeople join orders WHERE orders.snum=salespeople.snum GROUP BY odate,orders.snum HAVING odate='1990-03-10';

22) Find all customers located in cities where Serres has customers.
	mysql> SELECT cname,city FROM customers WHERE city = (SELECT city FROM salespeople WHERE sname='serres');

23) Select all customers with a rating above 200.
	mysql> SELECT * FROM customers WHERE rating>200;

24) Count the number of salespeople currently having orders in the orders table.
	mysql> SELECT COUNT(DISTINCT snum)FROM orders;

25) Write a query that produces all customers serviced by salespeople with a commission above 12%. Output the customer’s name,
	mysql> SELECT customers.cname,salespeople.sname,salespeople.comm FROM salespeople join customers WHERE customers.snum=salespeople.snum HAVING comm>12;

26) Find salespeople who have multiple customers.
	mysql> SELECT snum ,COUNT(snum) FROM customers GROUP BY snum HAVING COUNT(snum)>1;

27) Find salespeople with customers located in their own cities.
	mysql> SELECT  Sname,Cname,customers.city FROM customers join salespeople ON customers.city=salespeople.city;

28) Find all salespeople whose name starts with ‘P’ and fourth character is ‘I’.
	mysql> SELECT sname FROM salespeople WHERE sname like '%p__l';

29) Write a query that uses a subquery to obtain all orders for the customer named ‘Cisneros’. Assume you do not know his customer number.
	mysql> SELECT * FROM orders WHERE orders.cnum=(SELECT cnum FROM customers WHERE cname="cisneros");

30) Find the largest orders for Serres and Rifkin.
	mysql> SELECT snum,max(amt) FROM orders GROUP BY snum HAVING snum IN(SELECT snum FROM salespeople WHERE sname='Serres' or sname='Rifkin');

31) Sort the salespeople table in the following order: snum, sname, commission, city.
	mysql> select snum,sname,comm,city from salespeople;

32) Select all customers whose names fall in between ‘A’ and ‘G’ alphabetical range.
	mysql> select cname from customers where cname between 'A' and 'G' order by cname asc;

33) Select all the possible combinations of customers you can assign.
	mysql> select a.cname,b.cname from customers a,customers b where a.snum=b.snum;

34) Select all orders that are greater than the average for October 4.
	mysql> SELECT * FROM orders WHERE amt> (SELECT AVG(amt) FROM orders WHERE odate IN(SELECT odate FROM orders GROUP BY odate HAVING odate='1990-04-10') );

35) Write a select command using correlated subquery that selects the names and numbers of all customers with ratings equal to the maximum
for their city.
	mysql> SELECT cnum,cname,rating FROM customers WHERE rating IN (SELECT MAX(rating) FROM customers GROUP BY city );

36) Write a query that totals the orders for each day and places the results in descending order.
	mysql> SELECT SUM(AMT), odate FROM orders GROUP BY odate ORDER BY SUM(amt) DESC;

37) Write a select command that produces the rating followed by the name of each customer in SanJose.
	mysql> SELECT rating,cname FROM customers WHERE city="sanjose";

38) Find all orders with amounts smaller than any amount for a customer in SanJose.
	select onum,amt from orders where amt <(select max(amt) from orders where amt in(select orders.amt from customers,orders where  customers.city='SanJose'));

39) Find all orders with above average amounts for their customers.
	mysql> SELECT onum FROM orders WHERE amt>(SELECT AVG(amt) FROM orders);

40) Write a query that selects the highest rating in each city.
	mysql> SELECT city,MAX(rating) FROM customers GROUP BY city;

41) Write a query that calculates the amount of the salesperson’s commission on each order by a customer with a rating above 100.00.
	

42) Count the customers with ratings above SanJose’s average.
	mysql> SELECT COUNT(city) FROM customers WHERE rating >(SELECT AVG(rating) FROM customers WHERE city='sanjose' );

43) Find all salespeople that are located in either Barcelona or London.
	mysql> SELECT snum,sname FROM salespeople WHERE city= 'Barcelona'OR city='london';

44) Find all salespeople with only one customer.
	mysql> SELECT a.sname,a.snum FROM salespeople a,(SELECT snum,count(*) AS cust_count FROM customerS GROUP BY snum HAVING cust_count=1) b WHERE a.snum=b.snum;

45) Write a query that joins the Customer table to itself to find all pairs or customers served by a single salesperson.0
	mysql> SELECT c1.cname,c2.cname FROM customers c1,customers c2 WHERE c1.snum=c2.snum and c1.cname!=c2.cname;

46) Write a query that will give you all orders for more than $1000.00.
	mysql> SELECT onum FROM orders WHERE AMT>1000;

47) Write a query that lists each order number followed by the name of the customer who made that order.
	mysql> SELECT o.onum,c.cname FROM customers c JOIN orders o ON o.cnum=c.cnum;

48) Write a query that selects all the customers whose ratings are equal to or greater than ANY(in the SQL sense) of ‘Serres’.
	mysql> SELECT cname FROM customers WHERE rating >= ANY (SELECT rating FROM customers WHERE snum= (SELECT snum FROM salespeople WHERE sname='serres'));

49) Write two queries that will produce all orders taken on October 3 or October 4.
	mysql> SELECT * FROM orders WHERE odate='1990-03-10'OR odate='1990-04-10';

50) Find only those customers whose ratings are higher than every customer in Rome.
	mysql> SELECT cname FROM customers WHERE rating > (SELECT MAX(rating) FROM customers WHERE city= 'rome');

51) Write a query on the Customers table whose output will exclude all customers with a rating<= 100.00, unless they are located in Rome.
	mysql> SELECT * FROM customers WHERE (rating<=100 and city='Rome') or rating>100;

52) Find all rows from the customer’s table for which the salesperson number is 1001.
	mysql> SELECT * FROM customers WHERE snum=1001;

53) Find the total amount in orders for each salesperson where their total of amounts are greater than the amount of the largest order in the table.
	mysql> SELECT SUM(amt) ,snum FROM orders GROUP BY snum HAVING sum(amt)> (SELECT MAX(amt) FROM orders);

54) Write a query that selects all orders save those with zeroes or NULL in the amount file.
	mysql> SELECT onum FROM orders WHERE amt IS null OR amt=0;	

55) Produce all combinations of salespeople and customer names such that the former precedes the latter alphabetically, and the latter has a
rating of less than 200.
	mysql> SELECT s.sname,c.cname,c.rating FROM customers c,salespeople s WHERE c.rating<200 GROUP BY s.sname,c.cname,c.rating HAVING c.cname>=s.sname;

56) Find all salespeople name and commission.
	mysql> SELECT sname,comm FROM salespeople;

57) Write a query that produces the names and cities of all customers with the same rating as Hoffman. Write the query using Hoffman’s cnumrather than his rating, so that it would still be usable if his rating is changed.
	mysql> SELECT cname,city FROM customers WHERE rating in(SELECT rating FROM customers WHERE snum = (SELECT snum FROM customers WHERE cname='Hoffman'));

58) Find all salespeople for whom there are customers that follow them in alphabetical order.
	mysql> SELECT s.sname,c.cname FROM customers c JOIN salespeople s ON s.snum=c.snum GROUP BY s.sname,c.cname HAVING c.cname >= s.sname;

59) Write a query that produces the names and ratings of all customers who have average orders.
	mysql> SELECT a.cname,b.amt FROM customers a,orders b WHERE a.cnum=b.cnum AND amt>(SELECT avg(amt) as amt FROM orders)GROUP BY cname;

60) Find the SUM of all Amounts from the orders table.
	mysql> SELECT SUM(amt) FROM orders;

61) Write a SELECT command that produces the order number, amount, and the date from rows in the order table.
	mysql> SELECT onum,amt,odate FROM orders;

62) Count the number of non NULL rating fields in the Customers table (including repeats).
	mysql> SELECT COUNT(*) FROM customers WHERE rating IS NOT null;

63) Write a query that gives the names of both the salesperson and the customer for each order after the order number.
	mysql> SELECT onum,sname,cname FROM salespeople JOIN customers JOIN orders ON orders.cnum=customers.cnum AND orders.snum=salespeople.snum;

64) List the commissions of all salespeople servicing customers in London.
	mysql> SELECT sname,comm FROM salespeople s JOIN customers c ON s.snum=c.snum WHERE c.city='london';

65) Write a query using ANY or ALL that will find all salespeople who have no customers located in their city.
	mysql> SELECT a.sname,a.city,b.cname,b.city FROM salespeople a,customers b WHERE a.snum=b.snum AND a.city!=b.city;

66) Write a query using the EXISTS operator that selects all salespeople with customers located in their cities who are not assigned to them.
	mysql> SELECT s.sname,city FROM salespeople s WHERE EXISTS(SELECT * FROM customers c WHERE c.snum!=s.snum AND c.city=s.city);

67) Write a query that selects all customers serviced by Peel or Motika. (Hint: The snum field relates the 2 tables to one another.)
	mysql> SELECT cname FROM customers WHERE snum IN (select snum FROM salespeople WHERE sname='Motika'OR sname='Peel');

68) Count the number of salespeople registering orders for each day. (If a salesperson has more than one order on a given day, he or she should
be counted only once.)
	mysql> SELECT COUNT(distinct snum),odate FROM orders GROUP BY odate;

69) Find all orders attributed to salespeople who live in London.
	mysql> SELECT onum FROM orders WHERE snum IN (SELECT snum FROM salespeople WHERE city='london');

70) Find all orders by customers not located in the same cities as their salespeople.
	mysql> SELECT onum FROM orders WHERE cnum in(SELECT distinct cnum FROM customers,salespeople WHERE customers.city NOT IN(SELECT salespeople.city FROM salespeople));		

71) Find all salespeople who have customers with more than one current order.
	mysql> SELECT DISTINCT snum FROM orders WHERE cnum IN(SELECT cnum FROM orders GROUP BY cnum HAVING COUNT(cnum)>1);

72) Write a query that extracts from the customer’s table every customer assigned to a salesperson, who is currently having at least one another
	mysql> SELECT snum FROM customers  GROUP BY snum HAVING count(snum)>1;

73) Write a query on the customer’s table that will find the highest rating in each city. Put the output in this form: for the city (city), the highest
rating is (rating).
	mysql> SELECT city,max(rating) FROM customers GROUP BY city;

74) Write a query that will produce the snum values of all salespeople with orders, having amt greater than 1000 in the Orders Table(without
repeats).
	mysql> SELECT b.snum,b.sname,c.onum FROM customers a,salespeople b,orders c WHERE a.snum=b.snum AND a.cnum=c.cnum GROUP BY b.snum;

75) Write a query that lists customers in a descending order of rating. Output the rating field first, followed by the customer’s names and numbers. 
	mysql> SELECT rating, cname,cnum FROM customers ORDER BY rating DESC;

76) Find the average commission for salespeople in London.
	mysql> SELECT city, AVG(comm) FROM salespeople WHERE city='london';

77) Find all orders credited to the same salesperson who services Hoffman.(cnum 2001).
	mysql> SELECT s.sname ,o.onum, c.cname FROM customers c,orders o,salespeople s WHERE s.snum=c.snum AND c.cnum=o.cnum AND c.cnum=2001;

78) Find all salespeople whose commission is in between 0.10 and 0.12(both inclusive).
	mysql> SELECT sname FROM salespeople WHERE comm BETWEEN 10 AND 20;

79) Write a query that will give you the names and cities of all salespeople in London with a commission above 0.10.
	mysql> SELECT sname, city FROM salespeople WHERE city='london'AND comm>10;

80) Write a query that selects each customer’s smallest order.	 	
	mysql> SELECT onum, cnum, MIN(amt) FROM orders  GROUP BY cnum;

81) Write a query that selects the first customer in alphabetical order whose name begins with ‘G’.
	mysql> SELECT cname FROM customers WHERE cname LIKE 'G%'ORDER BY cname;

82) Write a query that counts the number of different non NULL city values in the customers table.
	mysql> SELECT COUNT(DISTINCT city) FROM customers WHERE city IS NOT NULL;

83) Find the average amount from the Orders Table.
	mysql> SELECT AVG(amt) FROM orders ;

84) Find all customers who are not located in SanJose and whose rating is above 200.
	mysql> SELECT cname FROM customers WHERE city!='sanjose' AND rating >200;

85) Give a simpler way to write this query.SELECT snum, sname, city, comm FROM salespeople WHERE (comm > + 0.12 OR comm < 0.14);
	mysql> SELECT * FROM salespeople WHERE comm BETWEEN 12 AND 14;

86) Which salespersons attend to customers not in the city they have been assigned to?
	mysql> SELECT s.sname , s.city , c.cname, c.city FROM customers c JOIN salespeople s ON c.snum=s.snum WHERE s.city != c.city;
	
87) Which salespeople get commission greater than 0.11 are serving customers rated less than 250?
	mysql> SELECT DISTINCT s.sname FROM customers c JOIN salespeople s ON c.snum=s.snum WHERE c.rating<250 AND s.comm>11 ;
	
88) Which salespeople have been assigned to the same city but get different commission percentages?
	mysql> SELECT sname,comm,city FROM salespeople WHERE city IN(SELECT city FROM salespeople GROUP BY city HAVING COUNT(city) > 1);

89) Which salesperson has earned the maximum commission?

90) Does the customer who has placed the maximum number of orders have the maximum rating?
	mysql> SELECT a.rating,b.onum,COUNT(*) AS orders_count FROM customers a,orders b WHERE a.cnum=b.cnum GROUP BY a.cnum ORDER BY a.rating;	

91) List all customers in descending order of customer rating.
	mysql> SELECT cnum,cname,rating FROM  customers ORDER BY rating DESC;

92) On which days has Hoffman placed orders?
	mysql> SELECT odate FROM orders WHERE cnum IN (SELECT cnum FROM customers WHERE cname='hoffman');

93) Which salesmen have no orders between 10/03/1990 and 10/05/1990?
	mysql> SELECT s.sname FROM orders o JOIN salespeople s ON o.snum=s.snum WHERE odate NOT BETWEEN '1990-03-10' AND '1990-05-10';

94) How many salespersons have succeeded in getting orders?
	mysql> SELECT COUNT(s.sname) FROM salespeople s WHERE s.snum IN(SELECT DISTINCT snum FROM orders);

95) How many customers have placed orders?
	mysql> SELECT COUNT(c.cname) FROM customers c WHERE c.cnum IN(SELECT DISTINCT cnum FROM orders);

96) On which date has each salesman booked an order of maximum value?
	mysql> SELECT s.sname,o.odate, MAX(o.amt) FROM salespeople s JOIN orders o ON s.snum=o.snum GROUP BY o.snum;	

97) Who is the most successful salesperson?

98) Which customers have the same rating?
	mysql> SELECT c1.cname,c2.cname,c1.rating FROM customers c1,customers c2 WHERE c1.rating=c2.rating AND c1.cname!=c2.cname ORDER BY c1.rating;

99) Find all orders greater than the average for October 4th.
	mysql> SELECT onum FROM orders WHERE amt > (SELECT AVG(amt) FROM orders WHERE odate='1990-04-10');

100) List all customers with ratings above Grass’s average.
	mysql> SELECT cname FROM customers WHERE rating >(SELECT AVG(rating) FROM customers WHERE cname='grass');

101) Which customers have above average orders?
	mysql> SELECT * FROM orders WHERE amt> (SELECT avg(amt)FROM orders);

102) Select the total amount in orders for each salesperson for which the total is greater than the amount of the largest order in the table.
	mysql> SELECT SUM(amt),snum FROM orders GROUP BY snum HAVING SUM(amt) >(SELECT MAX(amt)FROM orders);

103) Give names and numbers of all salespersons that have more than one customer?
	mysql> SELECT snum,sname FROM salespeople WHERE snum IN(SELECT snum FROM customers GROUP BY snum HAVING COUNT(snum)>1);

104) Select all salespeople by name and number who have customers in their city whom they don’t service.
	mysql> SELECT s.sname,s.snum FROM salespeople s,customers c WHERE s.city=c.city AND s.snum!=c.snum;

105) Does the total amount in orders by customer in Rome and London, exceed the commission paid to salesperson in London, and New York by
more than 5 times?
	

106) Which are the date, order number, amt and city for each salesperson (by name) for themaximum order he has obtained?
	mysql> SELECT o.onum,o.snum,s.city,o.odate,o.amt FROM orders o,salespeople s WHERE o.snum=s.snum AND amt IN(select MAX(amt) FROM orders GROUP BY snum);

107) Which salesperson is having lowest commission?
	mysql> SELECT snum, sname,MIN(comm) FROM salespeople;

